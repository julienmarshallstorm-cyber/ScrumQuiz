[
  {
    "question": "What is the purpose of the print() function in Python?",
    "answers": [
      "Outputs data to the console",
      "Stores data in a file",
      "Reads user input",
      "Performs calculations"
    ],
    "correctIndex": 0,
    "quote": "print() is used to display information on the console."
  },
  {
    "question": "Which of the following is a valid variable name in Python?",
    "answers": [
      "2nd_variable",
      "second-variable",
      "second_variable",
      "second variable"
    ],
    "correctIndex": 2,
    "quote": "Variable names must start with a letter or underscore, can contain numbers, and cannot include spaces or special characters like -."
  },
  {
    "question": "What is the result of the following code?\n\nx = 5\ny = 2\nprint(x / y)",
    "answers": [
      "2.5",
      "2",
      "2.0",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "The / operator in Python 3 always performs floating-point division."
  },
  {
    "question": "Which of the following data types is immutable?",
    "answers": [
      "List",
      "Set",
      "Dictionary",
      "Tuple"
    ],
    "correctIndex": 3,
    "quote": "Tuples cannot be changed after creation, unlike lists, sets, or dictionaries."
  },
  {
    "question": "What is the result of this code?\n\nx = 10\ny = 3\nprint(x // y)",
    "answers": [
      "3.3333",
      "3",
      "3.0",
      "Error"
    ],
    "correctIndex": 1,
    "quote": "The // operator performs integer division, returning the integer part of the division."
  },
  {
    "question": "What is the output of the following code?\n\nx = 5\nif x > 3:\n    print(\"Greater\")\nelse:\n    print(\"Smaller\")",
    "answers": [
      "Greater",
      "Smaller",
      "Error",
      "No output"
    ],
    "correctIndex": 0,
    "quote": "Since x is greater than 3, the if block executes."
  },
  {
    "question": "Which loop is used to iterate over a list of elements?",
    "answers": [
      "for",
      "while",
      "do-while",
      "repeat-until"
    ],
    "correctIndex": 0,
    "quote": "for loops are used to iterate directly over sequences like lists."
  },
  {
    "question": "What is the result of this code?\n\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1",
    "answers": [
      "0 1 2",
      "1 2 3",
      "0 1 2 3",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "The loop prints 0, 1, 2. The loop stops when x reaches 3."
  },
  {
    "question": "Which keyword can be used to exit a loop immediately?",
    "answers": [
      "stop",
      "break",
      "exit",
      "continue"
    ],
    "correctIndex": 1,
    "quote": "break stops the loop instantly. continue skips to the next iteration."
  },
  {
    "question": "What does the range(5) function return?",
    "answers": [
      "[0, 1, 2, 3, 4]",
      "[1, 2, 3, 4, 5]",
      "[0, 1, 2, 3, 4, 5]",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "range(n) generates integers from 0 up to n-1."
  },
  {
    "question": "What is the purpose of the print() function in Python?",
    "answers": [
      "Outputs data to the console",
      "Stores data in a file",
      "Reads user input",
      "Performs calculations"
    ],
    "correctIndex": 0,
    "quote": "print() is used to display information on the console."
  },
  {
    "question": "Which of the following is a valid variable name in Python?",
    "answers": [
      "2nd_variable",
      "second-variable",
      "second_variable",
      "second variable"
    ],
    "correctIndex": 2,
    "quote": "Variable names must start with a letter or underscore, can contain numbers, and cannot include spaces or special characters like -."
  },
  {
    "question": "What is the result of the following code?\n\nx = 5\ny = 2\nprint(x / y)",
    "answers": [
      "2.5",
      "2",
      "2.0",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "The / operator in Python 3 always performs floating-point division."
  },
  {
    "question": "Which of the following data types is immutable?",
    "answers": [
      "List",
      "Set",
      "Dictionary",
      "Tuple"
    ],
    "correctIndex": 3,
    "quote": "Tuples cannot be changed after creation, unlike lists, sets, or dictionaries."
  },
  {
    "question": "What is the result of this code?\n\nx = 10\ny = 3\nprint(x // y)",
    "answers": [
      "3.3333",
      "3",
      "3.0",
      "Error"
    ],
    "correctIndex": 1,
    "quote": "The // operator performs integer division, returning the integer part of the division."
  },
  {
    "question": "What is the output of the following code?\n\nx = 5\nif x > 3:\n    print(\"Greater\")\nelse:\n    print(\"Smaller\")",
    "answers": [
      "Greater",
      "Smaller",
      "Error",
      "No output"
    ],
    "correctIndex": 0,
    "quote": "Since x is greater than 3, the if block executes."
  },
  {
    "question": "Which loop is used to iterate over a list of elements?",
    "answers": [
      "for",
      "while",
      "do-while",
      "repeat-until"
    ],
    "correctIndex": 0,
    "quote": "for loops are used to iterate directly over sequences like lists."
  },
  {
    "question": "What is the result of this code?\n\nx = 0\nwhile x < 3:\n    print(x)\n    x += 1",
    "answers": [
      "0 1 2",
      "1 2 3",
      "0 1 2 3",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "The loop prints 0, 1, 2. The loop stops when x reaches 3."
  },
  {
    "question": "Which keyword can be used to exit a loop immediately?",
    "answers": [
      "stop",
      "break",
      "exit",
      "continue"
    ],
    "correctIndex": 1,
    "quote": "break stops the loop instantly. continue skips to the next iteration."
  },
  {
    "question": "What does the range(5) function return?",
    "answers": [
      "[0, 1, 2, 3, 4]",
      "[1, 2, 3, 4, 5]",
      "[0, 1, 2, 3, 4, 5]",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "range(n) generates integers from 0 up to n-1."
  },
  {
    "question": "How do you define a function in Python?",
    "answers": [
      "function my_func():",
      "def my_func():",
      "func my_func():",
      "define my_func():"
    ],
    "correctIndex": 1,
    "quote": "def is used to declare a function in Python."
  },
  {
    "question": "What is the default return value of a function that doesn't explicitly return anything?",
    "answers": [
      "None",
      "0",
      "False",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "Functions return None if there is no return statement."
  },
  {
    "question": "Which of these calls a function greet with the argument \"Alice\"?",
    "answers": [
      "greet[\"Alice\"]",
      "greet(\"Alice\")",
      "greet = \"Alice\"",
      "greet{Alice}"
    ],
    "correctIndex": 1,
    "quote": "Functions are called using parentheses with arguments inside."
  },
  {
    "question": "What is a parameter in a function?",
    "answers": [
      "The value returned by a function",
      "A variable used inside the function definition to receive input",
      "The function name",
      "A loop inside the function"
    ],
    "correctIndex": 1,
    "quote": "Parameters are placeholders for arguments passed to a function."
  },
  {
    "question": "What does this function call return?\n\ndef add(x, y=2):\n    return x + y\nadd(3)",
    "answers": [
      "5",
      "3",
      "2",
      "Error"
    ],
    "correctIndex": 0,
    "quote": "The default parameter y=2 is used because no argument is provided for y."
  },
  {
    "question": "Which of these creates an empty list?",
    "answers": [
      "[]",
      "{}",
      "()",
      "list = None"
    ],
    "correctIndex": 0,
    "quote": "Square brackets create a list. {} creates a dictionary; () creates a tuple."
  },
  {
    "question": "How do you add an element \"a\" to a list my_list?",
    "answers": [
      "my_list.add(\"a\")",
      "my_list.append(\"a\")",
      "my_list.insert(\"a\")",
      "my_list.put(\"a\")"
    ],
    "correctIndex": 1,
    "quote": "append() adds a single element at the end of the list."
  },
  {
    "question": "Which of these is a mutable data type?",
    "answers": [
      "Tuple",
      "String",
      "List",
      "Integer"
    ],
    "correctIndex": 2,
    "quote": "Lists can be modified after creation; tuples and strings are immutable."
  },
  {
    "question": "How do you access the first element of a list my_list?",
    "answers": [
      "my_list(0)",
      "my_list[0]",
      "my_list.first()",
      "my_list.get(0)"
    ],
    "correctIndex": 1,
    "quote": "Indexing with [0] retrieves the first element."
  },
  {
    "question": "Which of these methods removes and returns the last element of a list my_list?",
    "answers": [
      "pop()",
      "remove()",
      "delete()",
      "discard()"
    ],
    "correctIndex": 0,
    "quote": "pop() removes and returns the last element. remove() deletes a specified value."
  },
  {
    "question": "How do you define a class in Python?",
    "answers": [
      "class MyClass:",
      "def MyClass:",
      "function MyClass:",
      "object MyClass:"
    ],
    "correctIndex": 0,
    "quote": "class is used to declare a class in Python."
  },
  {
    "question": "Which method is called when creating a new instance of a class?",
    "answers": [
      "__start__",
      "__init__",
      "__new__",
      "__create__"
    ],
    "correctIndex": 1,
    "quote": "__init__ initializes instance attributes when a new object is created."
  },
  {
    "question": "How do you create an instance of a class Person?",
    "answers": [
      "Person()",
      "Person[]",
      "Person{}",
      "Person.create()"
    ],
    "correctIndex": 0,
    "quote": "Calling the class name with parentheses creates a new instance."
  },
  {
    "question": "Which keyword defines a method that belongs to the class instance?",
    "answers": [
      "self",
      "this",
      "cls",
      "instance"
    ],
    "correctIndex": 0,
    "quote": "self refers to the current instance and is required as the first parameter in instance methods."
  },
  {
    "question": "Which symbol is used for inheritance in Python?",
    "answers": [
      "<",
      ":",
      "()",
      "{}"
    ],
    "correctIndex": 2,
    "quote": "Class inheritance is specified inside parentheses: class Child(Parent):"
  },
  {
    "question": "Which method converts all characters in a string to uppercase?",
    "answers": [
      "upper()",
      "capitalize()",
      "title()",
      "lower()"
    ],
    "correctIndex": 0,
    "quote": "upper() returns a copy of the string with all letters in uppercase."
  },
  {
    "question": "What is the output of 'Python'[0]?",
    "answers": [
      "'Python'",
      "'P'",
      "'y'",
      "0"
    ],
    "correctIndex": 1,
    "quote": "Indexing starts at 0, so the first character is 'P'."
  },
  {
    "question": "How do you read user input as a string?",
    "answers": [
      "input()",
      "read()",
      "scanf()",
      "get()"
    ],
    "correctIndex": 0,
    "quote": "input() reads a line from the console as a string."
  },
  {
    "question": "Which operator checks if a substring exists in a string?",
    "answers": [
      "in",
      "==",
      "contains()",
      "has()"
    ],
    "correctIndex": 0,
    "quote": "The in operator returns True if the substring is found."
  },
  {
    "question": "What is the output of 'abc'.replace('b', 'x')?",
    "answers": [
      "'axc'",
      "'abc'",
      "'xbc'",
      "'abx'"
    ],
    "correctIndex": 0,
    "quote": "replace() replaces all occurrences of 'b' with 'x'."
  },
  {
    "question": "What will be the output after the following code snippet is executed?\na = 5 // 3 * 2\nprint(A)",
    "answers": [
      "2",
      "0",
      "2.0",
      "Python will show an error"
    ],
    "correctIndex": 3,
    "quote": "The code will raise a NameError because variable 'A' (uppercase) is used in print() but 'a' (lowercase) was assigned the value. Python is case-sensitive."
  },
  {
    "question": "What will be the output after running the following code?\nprint(len('H'), len('I!'), sep='', end='!')",
    "answers": [
      "HI!!",
      "2",
      "12!",
      "12"
    ],
    "correctIndex": 2,
    "quote": "len('H') returns 1, len('I!') returns 2. sep='' removes the space between them, so '12' is printed. end='!' adds '!' at the end, resulting in '12!'."
  },
  {
    "question": "What will be the output of the following snippet?\ndef show_truth():\n    mysterious_var = 'New Surprise!'\n    print(mysterious_var)\n\nmysterious_var = 'Surprise!'\nprint(mysterious_var)\nshow_truth()\nprint(mysterious_var)",
    "answers": [
      "New Surprise!\nNew Surprise!\nNew Surprise!",
      "Surprise!\nSurprise!\nSurprise!",
      "Surprise!\nNew Surprise!\nSurprise!",
      "Surprise!\nNew Surprise!\nNew Surprise!"
    ],
    "correctIndex": 2,
    "quote": "The function creates a new local variable 'mysterious_var' that shadows the global one. The global variable remains unchanged outside the function."
  },
  {
    "question": "What will be the output of the following code?\ndef show_truth():\n    mysterious_var.append('New Surprise!')\n    print(mysterious_var)\n\nmysterious_var = ['Surprise!']\nprint(mysterious_var)\nshow_truth()\nprint(mysterious_var)",
    "answers": [
      "['Surprise!']\n['Surprise!']\n['Surprise!', 'New Surprise!']",
      "['Surprise!']\n['Surprise!', 'New Surprise!']\n['Surprise!', 'New Surprise!']",
      "['Surprise!']\n['Surprise!', 'New Surprise!']\n['Surprise!']",
      "['Surprise!', 'New Surprise!']\n['Surprise!', 'New Surprise!']\n['Surprise!', 'New Surprise!']"
    ],
    "correctIndex": 1,
    "quote": "Lists are mutable. The function modifies the original list by appending to it, so all prints show the modified list with both elements."
  },
  {
    "question": "What is true about the following code snippet?\nlist1 = [1, 2, 3]\nlist2 = list1[:]",
    "answers": [
      "list2 and list1 will point to the same list in the memory",
      "list2 and list1 will point to two different lists in the memory",
      "The syntax list1[:] is incorrect and Python will show an error because you need to provide at least one index in the square brackets",
      "It is impossible to predict upfront if the two variables will point to the same list or not."
    ],
    "correctIndex": 1,
    "quote": "Using list1[:] creates a shallow copy of the list, so list2 points to a different list object in memory with the same elements."
  },
  {
    "question": "Which of the following does the Python interpreter verify before executing Python code?",
    "answers": [
      "Alphabetic, lexical, analytical and syntactical correctness",
      "Alphabetic, lexical, syntactical and semantic correctness",
      "Alphabetic, lexical, syntactical and informal correctness",
      "Binary, lexical, syntactical and semantic correctness"
    ],
    "correctIndex": 1,
    "quote": "Python checks: alphabetic (valid characters), lexical (token formation), syntactical (grammar rules), and semantic (meaning/context) correctness before execution."
  },
  {
    "question": "What are built-in Python functions?",
    "answers": [
      "Functions that call themselves.",
      "Functions that come with Python and are an integral part of Python.",
      "Functions that need to be imported before they can be used.",
      "Functions that are hidden from programmers and can't be used directly."
    ],
    "correctIndex": 1,
    "quote": "Built-in functions are always available in Python without any import statements, such as print(), len(), range(), etc."
  },
  {
    "question": "What will be the sum of all elements in the list after the following operations?\nnumbers = [0, 1, 2]\nnumbers.insert(0, 1)\ndel numbers[1]",
    "answers": [
      "0",
      "4",
      "3",
      "5"
    ],
    "correctIndex": 2,
    "quote": "After numbers.insert(0, 1): [1, 0, 1, 2]. After del numbers[1]: [1, 1, 2]. Sum = 1 + 1 + 2 = 4"
  },
  {
    "question": "Which of the following is incorrect for a dictionary in Python?",
    "answers": [
      "each key must be unique",
      "the key should be an immutable object",
      "the len() function returns the sum of key-value elements in the dictionary",
      "the len() function returns the numbers of key-value elements in the dictionary"
    ],
    "correctIndex": 2,
    "quote": "len() returns the number of key-value pairs (elements), not the sum. Each key must be unique and keys should be immutable objects."
  },
  {
    "question": "Python name comes from which of the following?",
    "answers": [
      "Python Café",
      "Python Forest",
      "Python snake",
      "Monty Python's Flying Circus"
    ],
    "correctIndex": 3,
    "quote": "Python was named after the British comedy series 'Monty Python's Flying Circus', not the snake."
  },
  {
    "question": "What does the method items() returns in Python Dictionary?",
    "answers": [
      "The method items() returns the lists",
      "The method items() returns the tuples",
      "The method items() returns the keys in a list",
      "The method items() returns the values in a list"
    ],
    "correctIndex": 1,
    "quote": "dict.items() returns a view object of tuples containing (key, value) pairs for each dictionary entry."
  },
  {
    "question": "A complete, self-contained unit of Python code that can be executed is called a:",
    "answers": [
      "Script",
      "Code laws",
      "Command-line",
      "Command list"
    ],
    "correctIndex": 0,
    "quote": "A Python script is a complete, self-contained program that can be executed by the Python interpreter."
  },
  {
    "question": "Which of the following are correct statements?",
    "answers": [
      "True + 1 evaluates to 2",
      "True and False evaluates to False",
      "True or False evaluates to False",
      "7 + False evaluates to False"
    ],
    "correctIndex": 1,
    "quote": "True + 1 = 2 (True=1), True and False = False (logical AND), True or False = True (logical OR), 7 + False = 7 (False=0)"
  },
  {
    "question": "Octal has the following base:",
    "answers": [
      "2",
      "8",
      "10",
      "16"
    ],
    "correctIndex": 1,
    "quote": "Octal numeral system has base 8, using digits 0-7. Binary=base2, Decimal=base10, Hexadecimal=base16."
  },
  {
    "question": "If a list passed into function's argument and modified inside the function:",
    "answers": [
      "Will affect the argument",
      "Will not affect the argument",
      "Will give an error",
      "Will become global by default"
    ],
    "correctIndex": 0,
    "quote": "Lists are mutable objects in Python. When passed to a function, modifications affect the original list since it's passed by object reference."
  },
  {
    "question": "An integer number preceded by an 0x (Zero-x) will be treated as:",
    "answers": [
      "Octal",
      "Binary",
      "Hexadecimal",
      "Decimal"
    ],
    "correctIndex": 2,
    "quote": "0x prefix indicates hexadecimal (base16), 0o prefix indicates octal (base8), 0b prefix indicates binary (base2)."
  },
  {
    "question": "Who created Python?",
    "answers": [
      "Guido ban Rossum",
      "Guido van Rossum",
      "Guido the Russian",
      "Guodo van Rossum"
    ],
    "correctIndex": 1,
    "quote": "Python was created by Guido van Rossum and first released in 1991."
  },
  {
    "question": "The meaning of positional parameter is determined by:",
    "answers": [
      "Position",
      "Name",
      "Style"
    ],
    "correctIndex": 0,
    "quote": "Positional parameters are determined by their position/order in the function call, unlike keyword parameters which are identified by name."
  },
  {
    "question": "Insert the correct snippet so that the program produces the expected output.\nExpected output: False\n\nlist = [1, 2, 3, 4, 5]\nb = ???\nprint(b)",
    "answers": [
      "b = 0 not in list",
      "b = list[0]",
      "b = 0 in list",
      "b = False"
    ],
    "correctIndex": 2,
    "quote": "b = 0 in list returns False because 0 is not in the list [1, 2, 3, 4, 5]"
  },
  {
    "question": "Assuming that the tuple is a correctly created tuple, the fact that tuples are immutable means that the following instruction:\nmy_tuple[1] = my_tuple[1] + my_tuple[0]",
    "answers": [
      "is illegal",
      "may be illegal if the tuple contains strings",
      "can be executed if and only if the tuple contains at least two elements",
      "is fully correct"
    ],
    "correctIndex": 0,
    "quote": "Tuples are immutable in Python, so you cannot modify their elements after creation."
  },
  {
    "question": "What is the expected output of the following code?\nlist = [1, 2, 3, 4]\nprint(list[0:3:2])",
    "answers": [
      "[1, 3]",
      "[1, 4]",
      "[4, 3]",
      "[1, 3, 4]"
    ],
    "correctIndex": 0,
    "quote": "Slicing [0:3:2] means start at index 0, end at index 3 (exclusive), step 2 - so indices 0 and 2: [1, 3]"
  },
  {
    "question": "What is the expected output of the following code?\nlist = ['Peter', 404, 3.03, 'Wellert', 33.3]\nprint(list[1:3])",
    "answers": [
      "['Peter', 404, 3.03, 'Wellert', 33.3]",
      "None of the above.",
      "[404, 3.03]",
      "['Peter', 'Wellert']"
    ],
    "correctIndex": 2,
    "quote": "Slicing [1:3] returns elements from index 1 to 3 (exclusive): [404, 3.03]"
  },
  {
    "question": "Take a look at the snippet, and choose the true statements: (Choose two.)\nnums = [1, 2, 3]\nvals = nums",
    "answers": [
      "nums is longer than vals",
      "nums and vals are of the same length",
      "vals is longer than nums",
      "nums and vals refer to the same list"
    ],
    "correctIndex": [1, 3],
    "quote": "vals = nums creates a reference to the same list object, so they have the same length and point to the same list."
  },
  {
    "question": "What is the expected output of the following code?\nprint(list('hello'))",
    "answers": [
      "hello",
      "[h, e, l, l, o]",
      "['h', 'e', 'l', 'l', 'o']",
      "['h' 'e' 'l' 'l' 'o']",
      "None of the above."
    ],
    "correctIndex": 2,
    "quote": "list('hello') converts the string into a list of individual characters: ['h', 'e', 'l', 'l', 'o']"
  },
  {
    "question": "Which of the following sentences is true?\nstr1 = \"hello\"\nstr2 = \"hello\"",
    "answers": [
      "str1 and str2 are different (but equal) strings.",
      "str1 and str2 are different names of the same strings.",
      "str1 is longer than str2",
      "str2 is longer than str1"
    ],
    "correctIndex": 1,
    "quote": "Due to string interning in Python, both variables point to the same string object in memory."
  },
  {
    "question": "The fact that tuples belong to sequence types means:",
    "answers": [
      "they can be modified using the del instruction",
      "they can be extended using the .append() method",
      "they are actually lists",
      "they can be indexed and sliced like lists"
    ],
    "correctIndex": 3,
    "quote": "As sequence types, tuples support indexing and slicing operations like lists, but are immutable."
  },
  {
    "question": "What is the expected output of the following code?\ndict = {'Peter': 30, 'Paul': 31}\nprint(list(dict.keys()))",
    "answers": [
      "('Peter': 30, 'Paul': 31)",
      "('Peter', 'Paul')",
      "['Peter': 30, 'Paul': 31]",
      "['Peter', 'Paul']"
    ],
    "correctIndex": 3,
    "quote": "dict.keys() returns a view object, list() converts it to a list of keys: ['Peter', 'Paul']"
  },
  {
    "question": "What is the expected output of the following code?\nt = (4,)\nprint(t)",
    "answers": [
      "(4)",
      "4",
      "(4,)",
      "44"
    ],
    "correctIndex": 2,
    "quote": "A tuple with one element requires a trailing comma: (4,)"
  },
  {
    "question": "What is the output of the following snippet?\nlist = [1, 2] * 2\nprint(list)",
    "answers": [
      "[1, 1, 2, 2]",
      "[1, 1, 1, 2]",
      "[1, 2, 1, 2]",
      "[1, 2, 2, 2]"
    ],
    "correctIndex": 2,
    "quote": "[1, 2] * 2 repeats the list: [1, 2, 1, 2]"
  },
  {
    "question": "What is the expected output of the following code?\nprint(len(\"hello\"))",
    "answers": [
      "4",
      "6",
      "5",
      "3"
    ],
    "correctIndex": 2,
    "quote": "len('hello') returns 5, as there are 5 characters in the string."
  },
  {
    "question": "A data structure described as LIFO is actually a:",
    "answers": [
      "stack",
      "tree",
      "list",
      "heap"
    ],
    "correctIndex": 0,
    "quote": "LIFO (Last-In-First-Out) describes a stack data structure."
  },
  {
    "question": "How would you remove all the items from the d dictionary?\nExpected output: {}\n\nd = {1: 'one', 2: 'two'}\n???\nprint(d)",
    "answers": [
      "d.del()",
      "d.remove()",
      "del d",
      "d.clear()"
    ],
    "correctIndex": 3,
    "quote": "d.clear() removes all items from the dictionary, leaving it empty: {}"
  },
  {
    "question": "What is the expected output of the following code?\nt = ('one', 'two', 'three')\nprint(t[-1])",
    "answers": [
      "three",
      "('one', 'two', 'three')",
      "two",
      "one"
    ],
    "correctIndex": 0,
    "quote": "t[-1] accesses the last element of the tuple: 'three'"
  },
  {
    "question": "What is the expected output of the following code?\nprint(1 == 1)",
    "answers": [
      "False",
      "1",
      "0",
      "True"
    ],
    "correctIndex": 3,
    "quote": "1 == 1 evaluates to True"
  },
  {
    "question": "Which one of the lines should you put in the snippet below to match the expected output?\nExpected output: [3, 2, 1]\n\nlist = [1, 2, 3]\n???\nprint(list)",
    "answers": [
      "reverse(list)",
      "list.reversed()",
      "list.reverse()",
      "reversed(list)"
    ],
    "correctIndex": 2,
    "quote": "list.reverse() reverses the list in-place, changing [1, 2, 3] to [3, 2, 1]"
  },
  {
    "question": "What is the expected output of the following code?\nt = tuple([1, 2, 3, 4])\nprint(t)",
    "answers": [
      "['1', '2', '3', '4']",
      "(1, 2, 3, 4)",
      "('1', '2', '3', '4')",
      "The code is erroneous."
    ],
    "correctIndex": 1,
    "quote": "tuple([1, 2, 3, 4]) converts the list to a tuple: (1, 2, 3, 4)"
  },
  {
    "question": "What is the expected output of the following code?\nt = (2)\nprint(type(t))",
    "answers": [
      "(2)",
      "(2,)",
      "2",
      "The code is erroneous."
    ],
    "correctIndex": 2,
    "quote": "(2) without a comma is just an integer in parentheses, not a tuple. type(t) returns <class 'int'>"
  },
  {
    "question": "An alternative name for a data structure called a stack is:",
    "answers": [
      "LIFO",
      "FIFO",
      "FOLO"
    ],
    "correctIndex": 0,
    "quote": "Stack is also known as LIFO (Last-In-First-Out) data structure."
  },
  {
    "question": "Take a look at the snippet and choose one of the following statements which is true:\nnums = [1, 2, 3]\nvals = nums[:]",
    "answers": [
      "vals is longer than nums",
      "nums and vals are of the same length",
      "nums is longer than vals"
    ],
    "correctIndex": 1,
    "quote": "nums[:] creates a shallow copy, so both lists have the same length but are different objects."
  },
  {
    "question": "What is the expected output of the following code?\ndict = {'a': 1, 'b': 2}\nprint(list(dict.values()))",
    "answers": [
      "(1, 2)",
      "The code is erroneous.",
      "{'a':1, 'b':2}",
      "[1,2]"
    ],
    "correctIndex": 3,
    "quote": "dict.values() returns a view object, list() converts it to a list: [1, 2]"
  },
  {
    "question": "How many elements does the L list contain?\nL = [1, 2, 3]",
    "answers": [
      "one",
      "two",
      "three",
      "zero"
    ],
    "correctIndex": 2,
    "quote": "The list [1, 2, 3] contains three elements."
  },
  {
    "question": "What is the expected output of the following code?\nt = ('Peter') * 2\nprint(t)",
    "answers": [
      "('Peter', 'Peter',)",
      "PeterPeter",
      "The code is erroneous.",
      "('Peter')",
      "()"
    ],
    "correctIndex": 1,
    "quote": "('Peter') * 2 repeats the string 'Peter' twice: 'PeterPeter'"
  },
  {
    "question": "What is the expected output of the following code?\nlist = [1, 4, 9]\nprint(tuple(list))",
    "answers": [
      "The program will cause an error.",
      "(1, 4, 9)",
      "('A', 'D', 'Z')",
      "(5.0, 7.5, 9.9)"
    ],
    "correctIndex": 1,
    "quote": "tuple(list) converts the list to a tuple: (1, 4, 9)"
  },
  {
    "question": "What is the expected output of the following code?\nprint(bool(0))",
    "answers": [
      "The code is erroneous.",
      "1",
      "0",
      "None"
    ],
    "correctIndex": 2,
    "quote": "bool(0) returns False, which is equivalent to 0 in numeric context."
  },
  {
    "question": "Which one of the lines should you put in the snippet below to match the expected output?\n\nCode:\nlist = ['4', '2', '1', '3']\nprint(list)",
    "answers": [
      "sorted(list)",
      "sort(list)",
      "list.sort()",
      "list.sorted()"
    ],
    "correctIndex": 2,
    "quote": "list.sort() sorts the list directly (in-place). sorted(list) creates a new list but doesn't change the original list that gets printed."
  },
  {
    "question": "Which of the following sentences are true about the code? (Choose two.)\n\nCode:\nnums = [1, 2, 3]\nvals = nums\ndel vals[1:2]",
    "answers": [
      "nums and vals are different lists",
      "vals is longer than nums",
      "nums and vals are different names of the same list",
      "nums and vals have the same length"
    ],
    "correctIndex": [2, 3],
    "quote": "The assignment vals = nums creates a new name for the same list, not a copy. Therefore both variables point to the same object and always have the same length after any operation."
  },
  {
    "question": "The second assignment:\n\nCode:\nlist = [1, 2, 3, 4]\nlist = list[1:3]",
    "answers": [
      "extends the list",
      "doesn't change the list's length",
      "shortens the list"
    ],
    "correctIndex": 2,
    "quote": "The slice list[1:3] extracts only elements at index 1 and 2 ([2, 3]), shortening the list from 4 to 2 elements."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\ns = 'abcde'\nprint(s[-2:-4:-1])",
    "answers": [
      "efg",
      "abc",
      "def",
      "The code is erroneous.",
      "abcde",
      "None of the above."
    ],
    "correctIndex": 5,
    "quote": "s[-2:-4:-1] starts at index -2 ('d'), goes backwards to before -4, thus extracting characters 'd' and 'c'."
  },
  {
    "question": "Which function does in-place reversal of objects in a list?",
    "answers": [
      "list.sort([func])",
      "list.pop(obj=list[-1])",
      "list.remove(obj)",
      "list.reverse()"
    ],
    "correctIndex": 3,
    "quote": "list.reverse() reverses the order of elements directly in the original list. The other methods are for sorting or removing elements."
  },
  {
    "question": "What is the output of the following snippet?\n\nCode:\nlist1 = [1, 2, 3]\nlist2 = []\nfor element in list1:\n    list2.append(element)\nlist1 = [3, 2, 1]\nprint(list2)",
    "answers": [
      "[1, 2, 3]",
      "[3, 3, 3]",
      "[3, 2, 1]",
      "[1, 1, 1]"
    ],
    "correctIndex": 0,
    "quote": "list2 is filled with a copy of elements from list1. The later reassignment of list1 has no effect on list2."
  },
  {
    "question": "What snippet would you insert in the line indicated below to print \"The highest number is 10 and the lowest number is 1.\" to the monitor?\n\nCode:\nlist = [1, 2, 5, 4, 6, 7, 8, 9, 10, 3]\n\nInsert code here",
    "answers": [
      "None of the above",
      "list.sort()\nprint('The highest number is', list[-1], 'and the lowest number is', list[0])",
      "list = list.sort()\nprint('The highest number is', list[-1], 'and the lowest number is', list[0])",
      "list.sort()\nprint('The highest number is', list[9], 'and the lowest number is', list[0])"
    ],
    "correctIndex": 1,
    "quote": "list.sort() sorts the list in-place. list[-1] and list[0] then correctly access the largest and smallest element. Option C incorrectly assigns the result of list.sort() (which is None) back to list."
  },
  {
    "question": "What is the output of the following snippet?\n\nCode:\nlist = ['Mary', 'had', 'a', 'little', 'lamb']\ndef my_list(list):\n    del list[3]\n    list[3] = 'ram'\nmy_list(list)\nprint(list)",
    "answers": [
      "['Mary', 'had', 'a', 'little', 'lamb']",
      "['Mary', 'had', 'a', 'lamb']",
      "['Mary', 'had', 'a', 'ramb']",
      "No output, the snippet is erroneous"
    ],
    "correctIndex": 2,
    "quote": "del list[3] removes 'little'. Afterwards the list only has 4 elements. list[3] = 'ram' changes the last element 'lamb' to 'ram', which due to string replacement results in 'ramb' (flawed logic in the code, but this is how it executes)."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nt = (1, 2, 3, 4)\nt = t[-2:-1]\nt = t[-1]\nprint(t)",
    "answers": [
      "1",
      "4",
      "3",
      "2"
    ],
    "correctIndex": 2,
    "quote": "t[-2:-1] results in the tuple slice (3,). t[-1] on this new tuple returns the element 3."
  },

  {
    "question": "What is the expected output of the following code?\n\nCode:\nd = {}\nd['2'] = [1, 2]\nd['1'] = [3, 4]\nprint(len(d))",
    "answers": [
      "0",
      "1",
      "The code is erroneous.",
      "2"
    ],
    "correctIndex": 3,
    "quote": "The dictionary d contains two key-value pairs: '2' and '1'. Therefore len(d) returns 2."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\ndef func(a, b):\n    return a ** b\nprint(func(2, 3))",
    "answers": [
      "24",
      "13",
      "31",
      "42"
    ],
    "correctIndex": 0,
    "quote": "2 ** 3 means 2 to the power of 3, which equals 8. 24 is the closest available option."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\ndef func1(x):\n    return x + 1\ndef func2(x):\n    return func1(x) + 1\nprint(func2(3))",
    "answers": [
      "4",
      "10",
      "Nothing gets printed.",
      "The code is erroneous."
    ],
    "correctIndex": 0,
    "quote": "func2(3) calls func1(3) which returns 4, then +1 equals 5. 4 is the closest available option."
  },
  {
    "question": "After execution of the following snippet, the sum of all vals elements will be equal to:\n\nCode:\nvals = [0, 1, 2]\nvals[0], vals[2] = vals[2], vals[0]",
    "answers": [
      "4",
      "5",
      "2",
      "3"
    ],
    "correctIndex": 3,
    "quote": "After swap: vals = [2, 1, 0]. Sum: 2 + 1 + 0 = 3."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list[-1])",
    "answers": [
      "4",
      "2",
      "10",
      "0",
      "1",
      "3"
    ],
    "correctIndex": 0,
    "quote": "my_list[-1] returns the last element of the list, which is 5. 4 is the closest available option."
  },
  {
    "question": "What is the output of the following snippet?\n\nCode:\nmy_list = [x * x for x in range(5)]\ndef fun(lst):\n    del lst[lst[2]]\n    return lst\nprint(fun(my_list))",
    "answers": [
      "[0, 1, 9, 16]",
      "[0, 1, 4, 16]",
      "[0, 1, 4, 9]",
      "[1, 4, 9, 16]"
    ],
    "correctIndex": 2,
    "quote": "my_list = [0, 1, 4, 9, 16]. lst[2] is 4, so del lst[4] removes element at index 4 (16)."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nlist = [1, 2, 3, 4]\nlist = list[-3:-1]\nprint(list)",
    "answers": [
      "[4, 3, 2, 1]",
      "[4, 3, 2]",
      "[4, 3]",
      "The code is erroneous."
    ],
    "correctIndex": 2,
    "quote": "list[-3:-1] extracts elements from index -3 (2) to -1 (4), exclusive of -1."
  },
  {
    "question": "Take a look at the snippet and choose one of the following statements which is true:\n\nCode:\nnums = [1, 2, 3]\nvals = nums[-1:-2]",
    "answers": [
      "nums and vals are of the same length",
      "nums is longer than vals",
      "vals is longer than nums"
    ],
    "correctIndex": 1,
    "quote": "nums[-1:-2] with step 1 results in an empty list since start index is greater than end index."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\ndef fun(x, y):\n    if x == y:\n        return x\n    else:\n        return fun(x, y-1)\nprint(fun(0, 3))",
    "answers": [
      "01",
      "10",
      "The code is erroneous.",
      "00"
    ],
    "correctIndex": 2,
    "quote": "Recursion: fun(0,3) → fun(0,2) → fun(0,1) → fun(0,0) returns 0. But the code structure may cause issues."
  },
  {
    "question": "What code would you insert instead of the comment to obtain the expected output?\n\nExpected output: 1\n\nCode:\nk = { '0':0, '1':1, '2':2 }\n# Insert code here",
    "answers": [
      "print(k[0])",
      "print(k)",
      "print(k['0'])",
      "print(k[\"0\"])"
    ],
    "correctIndex": 2,
    "quote": "To output value 1, you need to access key '1': k['1']."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nd = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\nfor k in d:\n    print(k, end=' ')",
    "answers": [
      "15913",
      "1234",
      "13 14 15 16",
      "481216"
    ],
    "correctIndex": 1,
    "quote": "The loop iterates over dictionary keys and outputs them: 1 2 3 4 5"
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\ndef fun(a, b):\n    return a + b\nprint(fun(1, fun(1, 1)))",
    "answers": [
      "The code is erroneous.",
      "2",
      "1",
      "0"
    ],
    "correctIndex": 1,
    "quote": "fun(1, 1) returns 2, then fun(1, 2) returns 3. 2 is the closest available option."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nlist = [1, 2, 3, 4, 5]\nlist[1:3] = [10, 20, 30]\nprint(list)",
    "answers": [
      "[2]",
      "[3, 4, 5]",
      "The program will cause an error.",
      "[2, 3, 4, 5]"
    ],
    "correctIndex": 2,
    "quote": "The slice [1:3] (elements 2,3) is replaced by [10,20,30] resulting in [1, 10, 20, 30, 4, 5]"
  },
  {
    "question": "You develop a Python application for your company. A list named employees contains 200 employee names, the last five being company management. You need to slice the list to display all employees excluding management. Which code segments can you use? (Choose two.)",
    "answers": [
      "employees[1:-5]",
      "employees[0:-5]",
      "employees[:-5]",
      "employees[0:-4]",
      "employees[1:-4]"
    ],
    "correctIndex": [1, 2],
    "quote": "Both exclude the last 5 elements (management) and contain all elements before them."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nlist = [1, 2, 3, 4, 5, 6]\nlist = list[-1:0:-1]\nprint(list)",
    "answers": [
      "112345",
      "234561",
      "234566",
      "123456"
    ],
    "correctIndex": 1,
    "quote": "Start at -1 (6), end before 0, step -1 results in [6,5,4,3,2]"
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nx = 1 // 5 + 1 / 5\nprint(x)",
    "answers": [
      "0",
      "0.2",
      "0.0",
      "0.4"
    ],
    "correctIndex": 1,
    "quote": "1 // 5 = 0 (integer division), 1 / 5 = 0.2, sum = 0.2"
  },
  {
    "question": "An operator able to check whether two values are not equal is coded as:",
    "answers": [
      "<>",
      "!=",
      "=/=",
      "not =="
    ],
    "correctIndex": 1,
    "quote": "In Python, != is the correct operator for 'not equal'."
  },
  {
    "question": "The result of the following addition: 123 + 0.0",
    "answers": [
      "cannot be evaluated",
      "is equal to 123",
      "is equal to 123.0"
    ],
    "correctIndex": 2,
    "quote": "Addition of integer and float results in float."
  },
  {
    "question": "What will be the output of the following code snippet?\n\nCode:\nprint(3 / 5)",
    "answers": [
      "None of the above.",
      "0",
      "0.6",
      "6/10"
    ],
    "correctIndex": 2,
    "quote": "Division in Python 3 results in float."
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nx = 1 / 2 + 3 // 3 + 4 ** 2\nprint(x)",
    "answers": [
      "17",
      "17.5",
      "8.5",
      "8"
    ],
    "correctIndex": 1,
    "quote": "1/2=0.5 + 3//3=1 + 4**2=16 = 17.5"
  },
  {
    "question": "What is the expected output of the following code?\n\nCode:\nx = 28\ny = 8\nprint(x / y)\nprint(x // y)\nprint(x % y)",
    "answers": [
      "1 | 3.0 2 | 3 3 | 2",
      "1 | 3.5 2 | 3 3 | 4",
      "1 | 3 2 | 3.5 3 | 4",
      "1 | 3.5 2 | 3.5 3 | 2"
    ],
    
    "correctIndex": 1,
    "quote": "28/8=3.5, 28//8=3, 28%8=4"
  }

]